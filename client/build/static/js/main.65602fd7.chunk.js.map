{"version":3,"sources":["Title.js","Timesheet.js","WorkClock.js","App.js","serviceWorker.js","index.js"],"names":["Title","props","Typography","component","variant","color","gutterBottom","children","API","Timesheet","state","timesheet","this","refreshTimesheet","fetch","then","response","json","data","result","setState","rows","rowid","method","row","column","event","refresh","classes","Fragment","Grid","container","spacing","justify","alignItems","item","IconButton","className","button","aria-label","Table","size","onClick","tableClick","TableHead","TableRow","TableCell","align","TableBody","map","start","Date","duration","end","ms","hr","Math","floor","min","key","toLocaleDateString","toLocaleTimeString","sendDeleteRequest","Component","WorkClock","sendStartRequest","bind","sendEndRequest","watchState","stopStopwatch","clearInterval","stateInterval","setInterval","startDate","startStopwatch","console","log","refreshApp","stopwatchInterval","sec","xs","sm","md","lg","Button","disabled","fullWidth","App","timerState","startTime","interval","forceUpdate","fixedHeightPaper","clsx","paper","fixedHeight","root","CssBaseline","AppBar","appBar","Toolbar","toolbar","noWrap","title","content","appBarSpacer","Container","maxWidth","Paper","withStyles","theme","display","flexGrow","height","overflow","mixins","paddingTop","paddingBottom","padding","flexDirection","margin","icon","withTheme","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.65602fd7.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport Typography from '@material-ui/core/Typography';\n\nexport default function Title(props) {\n  return (\n    <Typography component=\"h2\" variant=\"h6\" color=\"primary\" gutterBottom>\n      {props.children}\n    </Typography>\n  );\n}\n\nTitle.propTypes = {\n  children: PropTypes.node,\n};","import React, { Component } from 'react';\n// import { withStyles } from '@material-ui/core/styles';\n\nimport Grid from '@material-ui/core/Grid';\n\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\n\nimport IconButton from '@material-ui/core/IconButton';\nimport EditIcon from '@material-ui/icons/Edit';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport AddAlarmIcon from '@material-ui/icons/AddAlarm'\n\nimport Title from './Title';\n\n// // Generate Order Data\n// function createData(id, date, name, shipTo, paymentMethod, amount) {\n//   return { id, date, name, shipTo, paymentMethod, amount };\n// }\n\n// const rows = [\n//   createData(0, '16 Mar, 2019', 'Elvis Presley', 'Tupelo, MS', 'VISA ⠀•••• 3719', 312.44),\n//   createData(1, '16 Mar, 2019', 'Paul McCartney', 'London, UK', 'VISA ⠀•••• 2574', 866.99),\n//   createData(2, '16 Mar, 2019', 'Tom Scholz', 'Boston, MA', 'MC ⠀•••• 1253', 100.81),\n//   createData(3, '16 Mar, 2019', 'Michael Jackson', 'Gary, IN', 'AMEX ⠀•••• 2000', 654.39),\n//   createData(4, '15 Mar, 2019', 'Bruce Springsteen', 'Long Branch, NJ', 'VISA ⠀•••• 5919', 212.79),\n// ];\n\n// const useStyles = makeStyles(theme => ({\n//   seeMore: {\n//     marginTop: theme.spacing(3),\n//   },\n// }));\nconst API = 'http://localhost:8000/api';\nconst TIMESHEET_QUERY = '/timesheet'\n\n\nclass Timesheet extends Component {\n\n    constructor(props) {\n        super(props);\n        \n        this.state = {\n            timesheet: [],\n        }\n    }\n\n    componentDidMount() {\n        this.refreshTimesheet();\n    }\n\n    refreshTimesheet() {\n        fetch(API + TIMESHEET_QUERY)\n            .then(response => response.json())\n            .then(data => {\n                if (data.result === 1) {\n                    this.setState({\n                        timesheet: data.rows,\n                    })\n                }\n            })\n    }\n\n    sendDeleteRequest(rowid) {\n        fetch(API + TIMESHEET_QUERY + '/' + rowid, {\n            method: 'delete',\n        })\n            .then(response => response.json())\n            .then(data => {\n                if (data.result === 1) {\n                    this.refreshTimesheet()\n                }\n            })\n    }\n\n    tableClick(row,column,event) {\n        // console.log(row, column, event);\n    }\n\n    render() {\n\n        if (this.props.refresh) {\n            this.refreshTimesheet();            \n        }\n\n        const { classes } = this.props;\n\n        return (\n            <React.Fragment>\n                <Grid container spacing={3} justify='space-between' alignItems='center'>\n                    <Grid item>\n                        <Title> Timesheet </Title>\n                    </Grid>\n                    <Grid item>\n                        <IconButton color={'primary'} className={classes.button} aria-label=\"delete\">\n                            <AddAlarmIcon />\n                        </IconButton>\n                    </Grid>\n                </Grid>\n\n                <Table size=\"medium\" onClick={this.tableClick}>\n                    <TableHead>\n                        <TableRow>\n                            <TableCell>Date</TableCell>\n                            <TableCell>Start Time</TableCell>\n                            <TableCell>End Time</TableCell>\n                            <TableCell>Duration</TableCell>\n                            <TableCell>Rating</TableCell>\n                            <TableCell>Task(s)</TableCell>\n                            <TableCell align=\"right\"></TableCell>\n                        </TableRow>\n                    </TableHead>\n                    <TableBody>\n                        {\n                            this.state.timesheet.map(row => {\n                                var start = new Date(row.start);\n                                var end = new Date(row.end);\n                                var duration = (function(start, end) {\n                                    var ms = end - start\n                                    var hr = Math.floor(ms / (1000 * 60 * 60) % 60);\n                                    var min = Math.floor(ms / (1000 * 60) % 60);\n                                    if (hr) {\n                                        return hr + ' hours and ' + min + ' minutes'\n                                    } else {\n                                        return min + ' minutes'\n                                    }\n                                }(start, end));\n                                \n                                return (\n                                    <TableRow key={row.rowid}>\n                                    <TableCell>{start.toLocaleDateString()}</TableCell>\n                                    <TableCell>{start.toLocaleTimeString()}</TableCell>\n                                    <TableCell>{start.toLocaleTimeString()}</TableCell>\n                                    <TableCell>{duration}</TableCell>\n                                    <TableCell>{2}</TableCell>\n                                    <TableCell>worc_lock</TableCell>\n                                    <TableCell align=\"right\">\n                                        <IconButton color={'primary'} className={classes.button} aria-label=\"delete\">\n                                            <EditIcon />\n                                        </IconButton>\n                                        <IconButton color={'secondary'} className={classes.button} aria-label=\"delete\" onClick={() => this.sendDeleteRequest(row.rowid)}>\n                                            <DeleteIcon />\n                                        </IconButton>\n                                    </TableCell>\n                                    </TableRow>\n                                )\n                            })\n                        }\n                    </TableBody>\n                </Table>\n            </React.Fragment>\n        )\n    }   \n\n}\n\n// export default function Orders() {\n//   const classes = useStyles();\n//   return (\n//     <React.Fragment>\n//       <Title>Recent Orders</Title>\n//       <Table size=\"small\">\n//         <TableHead>\n//           <TableRow>\n//             <TableCell>Date</TableCell>\n//             <TableCell>Name</TableCell>\n//             <TableCell>Ship To</TableCell>\n//             <TableCell>Payment Method</TableCell>\n//             <TableCell align=\"right\">Sale Amount</TableCell>\n//           </TableRow>\n//         </TableHead>\n//         <TableBody>\n//           {rows.map(row => (\n//             <TableRow key={row.id}>\n//               <TableCell>{row.date}</TableCell>\n//               <TableCell>{row.name}</TableCell>\n//               <TableCell>{row.shipTo}</TableCell>\n//               <TableCell>{row.paymentMethod}</TableCell>\n//               <TableCell align=\"right\">{row.amount}</TableCell>\n//             </TableRow>\n//           ))}\n//         </TableBody>\n//       </Table>\n//       <div className={classes.seeMore}>\n//         <Link color=\"primary\" href=\"javascript:;\">\n//           See more orders\n//         </Link>\n//       </div>\n//     </React.Fragment>\n//   );\n// }\n\nexport default Timesheet;\n","import React, { Component } from 'react';\n// import { makeStyles } from '@material-ui/core/styles';\n// import PropTypes from 'prop-types';\nimport Typography from '@material-ui/core/Typography';\nimport Grid from '@material-ui/core/Grid';\nimport Button from '@material-ui/core/Button';\n\n\nconst API = 'http://localhost:8000/api';\nconst TIMER_QUERY = '/timer'\n\n\nclass WorkClock extends Component {\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            state: 'IDLE',\n            start: new Date(),\n            duration: 0,\n        }\n        \n        this.sendStartRequest = this.sendStartRequest.bind(this);\n        this.sendEndRequest = this.sendEndRequest.bind(this);\n    }\n\n    componentDidMount() {\n        this.watchState();\n    }\n\n    componentWillUnmount() {\n        this.stopStopwatch();\n        clearInterval(this.stateInterval);\n    }\n\n\n    watchState() {\n        this.stateInterval = setInterval(() => {\n            fetch(API + TIMER_QUERY)\n                .then(response => response.json())\n                .then(data => {\n                    switch(data.state) {\n                        case 'IDLE':\n                            this.stopStopwatch();\n                            this.setState({\n                                state: data.state,\n                            })\n                            break;\n                        case 'WORKING':\n                            var startDate = new Date(data.start);\n                            if (this.state.start !== startDate) {\n                                this.setState({\n                                    state: data.state,\n                                    start: startDate,\n                                });\n                                this.startStopwatch();\n                            }\n                            break;\n                        default:\n                            console.log(data);\n                    }\n                })\n        }, 1000)\n    }\n\n    sendStartRequest() {\n        this.setState({\n            state: 'WORKING',\n            start: new Date(),\n        })\n        fetch(API + TIMER_QUERY + '?action=START', {\n            method: 'PUT'\n        })\n            .then(response => response.json())\n            .then(data => console.log(data))\n    }\n\n    sendEndRequest() {\n        this.setState({\n            state: 'IDLE',\n        })\n        fetch(API + TIMER_QUERY + '?action=END', {\n            method: 'PUT'\n        })\n            .then(response => response.json())\n            .then(data => {\n                this.props.refreshApp();\n            })\n    }\n\n    startStopwatch() {\n        clearInterval(this.stopwatchInterval);\n        this.stopwatchInterval = setInterval(() => {\n            var current = new Date();\n            var duration = current - this.state.start;\n            this.setState({\n                duration: duration,\n            })\n        }, 100);\n    }\n\n\n    stopStopwatch() {\n        clearInterval(this.stopwatchInterval);\n    }\n\n    render() {\n        \n        return (\n            <React.Fragment>\n                <Typography component=\"h1\" variant=\"h1\" color=\"primary\" align=\"center\">\n                    {\n                        function(ms) {\n                            var hr = Math.floor(ms / (1000 * 60 * 60) % 60);\n                            var min = Math.floor(ms / (1000 * 60) % 60);\n                            var sec = Math.floor(ms / 1000 % 60);\n                            hr = (hr < 10) ? '0' + hr : hr;\n                            min = (min < 10) ? '0' + min : min;\n                            sec = (sec < 10) ? '0' + sec : sec;\n                            return hr + ':' + min + ':' + sec;\n                        }(this.state.duration)\n                    }\n                </Typography>\n                <Grid container spacing={3} justify='center' alignItems='center'>\n                    <Grid item xs={6} sm={4} md={2} lg={2}>\n                        <Button onClick={this.sendStartRequest} disabled={this.state.state === 'WORKING'} variant=\"outlined\" color='primary' fullWidth>\n                            Start Working\n                        </Button>\n                    </Grid>\n                    <Grid item xs={6} sm={4} md={2} lg={2}>\n                        <Button onClick={this.sendEndRequest} disabled={this.state.state === 'IDLE'} variant=\"outlined\" color='secondary' fullWidth>\n                            End Session\n                        </Button>\n                    </Grid>\n                </Grid>\n            </React.Fragment>\n        );\n    }\n}\n\n// export default function WorkClock(props) {\n\n//   return (\n//     <React.Fragment>\n//         <Typography component=\"h1\" variant=\"h1\" color=\"primary\" align=\"center\">\n//             {props.children}\n//         </Typography>\n//         <Grid container spacing={3} justify='center' alignItems='center'>\n//             <Grid item xs={6} sm={4} md={2} lg={2}>\n//                 <Button variant=\"outlined\" className={classes.button} color='primary' fullWidth>\n//                     Start Working\n//                 </Button>\n//             </Grid>\n//             <Grid item xs={6} sm={4} md={2} lg={2}>\n//                 <Button variant=\"outlined\" className={classes.button} color='secondary' fullWidth>\n//                     End Session\n//                 </Button>\n//             </Grid>\n//         </Grid>\n//     </React.Fragment>\n//   );\n// }\n\n// WorkClock.propTypes = {\n//   children: PropTypes.node,\n// };\n\nexport default WorkClock;","import React, { Component } from 'react';\nimport clsx from 'clsx';\nimport { withStyles } from '@material-ui/core/styles';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport Container from '@material-ui/core/Container';\nimport Grid from '@material-ui/core/Grid';\nimport Paper from '@material-ui/core/Paper';\n\nimport Timesheet from './Timesheet';\nimport WorkClock from './WorkClock';\n\n\nconst useStyles = theme => ({\n    root: {\n        display: 'flex',\n    },\n    appBar: {\n    },\n    toolbar: {\n    },\n    title: {\n        flexGrow: 1,\n    },\n    content: {\n        flexGrow: 1,\n        height: '100vh',\n        overflow: 'auto',\n    },\n    appBarSpacer: {\n        ...theme.mixins.toolbar,\n    },\n    container: {\n        paddingTop: theme.spacing(4),\n        paddingBottom: theme.spacing(4),\n    },\n    paper: {\n        padding: theme.spacing(2),\n        display: 'flex',\n        overflow: 'auto',\n        flexDirection: 'column',\n    },\n    fixedHeight: {\n        height: 240,\n    },\n    button: {\n        margin: theme.spacing(1),\n    },\n    icon: {\n        margin: theme.spacing(2),\n    },\n    \n});\n\n\nconst API = 'http://localhost:8000/api';\n// const DEFAULT_QUERY = '/timesheet/create?hey=1&jeff=2';\nconst TIMER_QUERY = '/timer'\nconst TIMESHEET_QUERY = '/timesheet'\n\nclass App extends Component {\n\n\n    constructor(props) {\n        super(props);\n        \n        this.refresh = false;        \n        this.state = {\n            timerState: 'hey :)',\n            startTime: new Date(),\n            timesheet: [],\n        };\n\n        this.refreshApp = this.refreshApp.bind(this);\n    }\n\n    componentDidMount() {\n        this.interval = setInterval(() => fetch(API + TIMER_QUERY)\n            .then(response => response.json())\n            .then(data => {\n                if (data.state !== this.state.timerState) {\n                    this.setState({\n                        timerState: data.state,\n                    })   \n                }\n            }), 1000);\n        \n        fetch(API + TIMESHEET_QUERY)\n            .then(response => response.json())\n            .then(data => {\n                if (data.result === 1) {\n                    this.setState({\n                        timesheet: data.rows,\n                    })\n                }\n            })\n    }\n\n    componentWillUnmount() {\n        clearInterval(this.interval);\n    }\n\n\n    refreshApp() {\n        this.refresh = true;\n        this.forceUpdate();\n        this.refresh = false;\n    }\n        \n\n    render() {\n        const state = this.state.timerState;\n        const { classes } = this.props;\n        const fixedHeightPaper = clsx(classes.paper, classes.fixedHeight);\n\n        return (\n            <div className={ classes.root }>\n                <CssBaseline />\n                <AppBar className={classes.appBar}>\n                    <Toolbar className={classes.toolbar}>\n                        <Typography component=\"h1\" variant=\"h6\" color=\"inherit\" noWrap className={classes.title}>\n                            ADD ME ON LINKEDIN\n                        </Typography>\n                    </Toolbar>\n                </AppBar>\n                <main className={classes.content}>\n                    <div className={classes.appBarSpacer} />\n                    <Container maxWidth=\"lg\" className={classes.container}>\n                        <Grid container spacing={3}>\n                            {/* Work Clock */ }\n                            <Grid item xs={12}>\n                                <Paper className={classes.paper}>\n                                    <WorkClock refreshApp={this.refreshApp}/>\n                                </Paper>\n                            </Grid>\n                            {/* Timer Series Chart*/}\n                            <Grid item xs={12} md={8} lg={9}>\n                                <Paper className={fixedHeightPaper}>\n                                    <span> { state } </span>\n                                </Paper>\n                            </Grid>\n                            {/* Statistics */}\n                            <Grid item xs={12} md={4} lg={3}>\n                                <Paper className={fixedHeightPaper}>\n                                    <span> { state } </span>\n                                </Paper>\n                            </Grid>\n                            {/* Timesheet */ }\n                            <Grid item xs={12}>\n                                <Paper className={classes.paper}>\n                                    <Timesheet data={this.state.timesheet} classes={classes} refresh={this.refresh}/>\n                                </Paper>\n                            </Grid>\n                        </Grid>\n                    </Container>\n                </main>\n            </div>\n        );\n    }\n}\n\n// export default App;\nexport default withStyles(useStyles, { withTheme: true })(App);\n    ","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}